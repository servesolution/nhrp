using EntityFramework;
using MIS.Services.Core;
using System.Data;
using MIS.Services.Report;
using System.Web.Mvc;
using MIS.Models.Report;
using MIS.Services.Report;
using MIS.Services.Vulnerability;
using System.IO;
using ClosedXML.Excel;
using System;
namespace MIS.Controllers.Report
{
    public class VulnerabilityReportController : BaseController
    {
        //
        // GET: /VulnerabilityReport/

        public ActionResult VulnerabilityDetail(HtmlReport obj)
        {

            DataTable dt = null;
            dt = (DataTable)Session["DetailResults"];
            ViewBag.ReportTitle = "Vulnerability Detail Report";
            ViewData["DetailResults"] = dt;
            return View(obj);
        }
        public ActionResult GetVulnerabilityReport(string dist, string vdc, string ward, string fdistrict, string sdistrict)
        {
            CommonFunction common = new CommonFunction();

            VulnerabilityService objVulService = new VulnerabilityService();
            NameValueCollection paramValues = new NameValueCollection();

            HtmlReport objReport = new HtmlReport();
            objReport.District = dist;
            objReport.VDC = vdc;
            objReport.Ward = ward;

            

            if (dist.ConvertToString() != string.Empty)
                paramValues.Add("dist", common.GetCodeFromDataBase(dist, "MIS_DISTRICT", "DISTRICT_CD"));
            if (vdc.ConvertToString() != string.Empty)
                paramValues.Add("vdc", common.GetCodeFromDataBase(vdc, "NHRS_NMUNICIPALITY", "NMUNICIPALITY_CD"));
            if (ward.ConvertToString() != string.Empty)
                paramValues.Add("ward", ward);
            if (fdistrict.ConvertToString() != string.Empty)
                paramValues.Add("fourteen_district", fdistrict.ToUpper());
            if (sdistrict.ConvertToString() != string.Empty)
                paramValues.Add("seventeen_district", sdistrict.ToUpper());



            if (Session["LanguageSetting"].ConvertToString() == "English")
            {
                paramValues.Add("lang", "E");
            }
            else
            {
                paramValues.Add("lang", "N");
            }



            DataTable dt = new DataTable();

            dt = objVulService.GetVulnerabilityReport(paramValues);
             if (dt != null)
            {                 
                Session["DetailResults"] = dt;
                objReport.District = dist;
                objReport.VDC = vdc;
                objReport.Ward = ward;

                Session["VulParams"] = objReport;
            }
            return RedirectToAction("VulnerabilityDetail", objReport);
        }

        public DataTable GetDataforExport(string dist, string vdc, string ward, string fdistrict, string sdistrict)
        {
            CommonFunction common = new CommonFunction();

            VulnerabilityService objVulService = new VulnerabilityService();
            NameValueCollection paramValues = new NameValueCollection();

            HtmlReport objReport = new HtmlReport();
            objReport.District = dist;
            objReport.VDC = vdc;
            objReport.Ward = ward;



            if (dist.ConvertToString() != string.Empty)
                paramValues.Add("dist", common.GetCodeFromDataBase(dist, "MIS_DISTRICT", "DISTRICT_CD"));
            if (vdc.ConvertToString() != string.Empty)
                paramValues.Add("vdc", common.GetCodeFromDataBase(vdc, "NHRS_NMUNICIPALITY", "NMUNICIPALITY_CD"));
            if (ward.ConvertToString() != string.Empty)
                paramValues.Add("ward", ward);
            if (fdistrict.ConvertToString() != string.Empty)
                paramValues.Add("fourteen_district", fdistrict.ToUpper());
            if (sdistrict.ConvertToString() != string.Empty)
                paramValues.Add("seventeen_district", sdistrict.ToUpper());



            if (Session["LanguageSetting"].ConvertToString() == "English")
            {
                paramValues.Add("lang", "E");
            }
            else
            {
                paramValues.Add("lang", "N");
            }



            DataTable dt = new DataTable();

            dt = objVulService.GetVulnerabilityReport(paramValues);
            return dt;
        }
        //forSummaryreport
        public ActionResult VulnerabilitySummary(HtmlReport obj)
        {

            DataTable dt = null;
            dt = (DataTable)Session["SummaryResults"];
            ViewBag.ReportTitle = "Vulnerability Summary Report";
            ViewData["SummaryResults"] = dt;
            return View(obj);
        }
        public ActionResult GetVulnerabilitySummaryReport(string dist, string vdc,string mode, string ward, string donorcd, string pkgcd)
        {
            CommonFunction common = new CommonFunction();
            VulnerabilityService objVulService = new VulnerabilityService();
            NameValueCollection paramValues = new NameValueCollection();
            HtmlReport objReport = new HtmlReport();
            objReport.Mode = mode;
            objReport.Donorcd = donorcd;
            objReport.District = dist;
            objReport.VDC = vdc;
            objReport.Ward = ward;
            objReport.Pkgcd = pkgcd;

            if (mode.ConvertToString() != string.Empty)
                paramValues.Add("mode", mode);
            if (dist.ConvertToString() != string.Empty)
                paramValues.Add("dist", common.GetCodeFromDataBase(dist, "MIS_DISTRICT", "DISTRICT_CD"));
            if (vdc.ConvertToString() != string.Empty)
                paramValues.Add("vdc", common.GetCodeFromDataBase(vdc, "NHRS_NMUNICIPALITY", "NMUNICIPALITY_CD"));
            if (ward.ConvertToString() != string.Empty)
                paramValues.Add("ward", ward);

            if (donorcd.ConvertToString() != string.Empty)
                paramValues.Add("donorcd", donorcd);

            if (pkgcd.ConvertToString() != string.Empty)
                paramValues.Add("pkgcd", pkgcd);

              

            if (Session["LanguageSetting"].ConvertToString() == "English")
            {
                paramValues.Add("lang", "E");
            }
            else
            {
                paramValues.Add("lang", "N");
            } 
            DataTable dt = new DataTable(); 
            dt = objVulService.GetVulnerabilitySummaryReport(paramValues); 
            if (dt != null)
            {
              
                Session["SummaryResults"] = dt;
                objReport.Mode = mode;
                objReport.Donorcd = donorcd;
                objReport.District = dist;
                objReport.VDC = vdc;
                objReport.Ward = ward;        
                objReport.Pkgcd = pkgcd;


            }
            return RedirectToAction("VulnerabilitySummary", objReport);
        }


        public ActionResult ExportExcel(string dist, string vdc, string ward, string fdistrict, string sdistrict)
        {
            DataTable dt = GetDataforExport(dist, vdc, ward, fdistrict, sdistrict);
            ViewData["ExportFont"] = "font-size: 13px";
            string usercd = SessionCheck.getSessionUserCode();
            string filePath = string.Empty;
          
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(dt);
                wb.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                wb.Style.Font.Bold = true;

                Response.Clear();
                Response.Buffer = true;
                Response.Charset = "";
                Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                Response.AddHeader("content-disposition", "attachment;filename= VulnerabilityReport.xlsx");

                using (MemoryStream MyMemoryStream = new MemoryStream())
                {
                    wb.SaveAs(MyMemoryStream);
                    MyMemoryStream.WriteTo(Response.OutputStream);
                    Response.Flush();
                    Response.End();
                }
            }  

            return RedirectToAction("VulnerabilityManagement", "Vulnerability");
        }

        private void releaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch
            {
                obj = null;
            }
            finally
            {
                GC.Collect();
            }
        }  
        protected string RenderPartialClaimViewToString(string viewName)
        {
            DataTable dtbl = new DataTable();
            HtmlReport rptParams = new HtmlReport();
            if ((DataTable)Session["DetailResults"] != null)
            {
                DataTable dt = (DataTable)Session["DetailResults"];

                ViewData["DetailResults"] = dt;
                //ViewData["d1"] = Session["StartDate"].ToString();
                //ViewData["d2"] = Session["EndDate"].ToString();


                rptParams = (HtmlReport)Session["VulParams"];
                if (string.IsNullOrEmpty(viewName))
                    viewName = ControllerContext.RouteData.GetRequiredString("action");

                using (StringWriter sw = new StringWriter())
                {
                    ViewEngineResult viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, viewName);
                    ViewData.Model = rptParams;
                    ViewContext viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);
                    viewResult.View.Render(viewContext, sw);
                    return sw.GetStringBuilder().ToString();
                }
            }
            return null;
        }
        //endsummary
    }
}
